//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NChained.Console.NChainedService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Product", Namespace="http://schemas.datacontract.org/2004/07/NChained.Service")]
    [System.SerializableAttribute()]
    public partial class Product : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductManufacturerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductSerialNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductDescription {
            get {
                return this.ProductDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductDescriptionField, value) != true)) {
                    this.ProductDescriptionField = value;
                    this.RaisePropertyChanged("ProductDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductManufacturer {
            get {
                return this.ProductManufacturerField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductManufacturerField, value) != true)) {
                    this.ProductManufacturerField = value;
                    this.RaisePropertyChanged("ProductManufacturer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductName {
            get {
                return this.ProductNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductNameField, value) != true)) {
                    this.ProductNameField = value;
                    this.RaisePropertyChanged("ProductName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductSerialNumber {
            get {
                return this.ProductSerialNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductSerialNumberField, value) != true)) {
                    this.ProductSerialNumberField = value;
                    this.RaisePropertyChanged("ProductSerialNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NChainedService.INChainedService")]
    public interface INChainedService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INChainedService/GetData", ReplyAction="http://tempuri.org/INChainedService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INChainedService/GetData", ReplyAction="http://tempuri.org/INChainedService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INChainedService/GetProductsByName", ReplyAction="http://tempuri.org/INChainedService/GetProductsByNameResponse")]
        NChained.Console.NChainedService.Product[] GetProductsByName(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INChainedService/GetProductsByName", ReplyAction="http://tempuri.org/INChainedService/GetProductsByNameResponse")]
        System.Threading.Tasks.Task<NChained.Console.NChainedService.Product[]> GetProductsByNameAsync(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INChainedService/SaveProduct", ReplyAction="http://tempuri.org/INChainedService/SaveProductResponse")]
        void SaveProduct(NChained.Console.NChainedService.Product Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INChainedService/SaveProduct", ReplyAction="http://tempuri.org/INChainedService/SaveProductResponse")]
        System.Threading.Tasks.Task SaveProductAsync(NChained.Console.NChainedService.Product Name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INChainedServiceChannel : NChained.Console.NChainedService.INChainedService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NChainedServiceClient : System.ServiceModel.ClientBase<NChained.Console.NChainedService.INChainedService>, NChained.Console.NChainedService.INChainedService {
        
        public NChainedServiceClient() {
        }
        
        public NChainedServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NChainedServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NChainedServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NChainedServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public NChained.Console.NChainedService.Product[] GetProductsByName(string Name) {
            return base.Channel.GetProductsByName(Name);
        }
        
        public System.Threading.Tasks.Task<NChained.Console.NChainedService.Product[]> GetProductsByNameAsync(string Name) {
            return base.Channel.GetProductsByNameAsync(Name);
        }
        
        public void SaveProduct(NChained.Console.NChainedService.Product Name) {
            base.Channel.SaveProduct(Name);
        }
        
        public System.Threading.Tasks.Task SaveProductAsync(NChained.Console.NChainedService.Product Name) {
            return base.Channel.SaveProductAsync(Name);
        }
    }
}
